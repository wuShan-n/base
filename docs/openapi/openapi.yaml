
openapi: 3.0.3
info:
  title: SpringBoot Auth & User API
  description: >
    基于 Spring Boot + Spring Security + JWT + MyBatis-Plus 的 **Auth & User** 模块 OpenAPI 设计。
    - JDK 25，Maven 单体多模块（common / user-domain / auth-domain / web-api）
    - 无状态访问令牌（Access JWT）+ 可旋转 Refresh Token
    - 经典 RBAC（用户-角色-权限）
    - 可选多租户（通过 `X-Tenant-Id` 头传入，0 为默认租户）
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: 本地开发
tags:
  - name: Auth
    description: 认证与令牌
  - name: Users
    description: 用户资料与管理
  - name: Accounts
    description: 账号身份（用户名/邮箱/手机/OAuth）绑定管理
  - name: Roles
    description: 角色管理
  - name: Permissions
    description: 权限资源管理
  - name: MFA
    description: 多因素认证
  - name: Tokens
    description: 令牌/黑名单/登录日志（管理）
externalDocs:
  description: 项目 README
  url: https://example.com/readme
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    TenantHeader:
      name: X-Tenant-Id
      in: header
      description: 多租户ID，未启用可不传，默认0
      required: false
      schema:
        type: string
        pattern: '^\d{1,20}$'
    PageNo:
      name: pageNo
      in: query
      schema: { type: integer, minimum: 1, default: 1 }
      required: false
      description: 页码（从1开始）
    PageSize:
      name: pageSize
      in: query
      schema: { type: integer, minimum: 1, maximum: 200, default: 20 }
      required: false
      description: 每页大小
    Sort:
      name: sort
      in: query
      required: false
      schema: { type: string }
      description: 排序（示例：createdAt,desc 或 nickname,asc）
  schemas:
    SnowflakeId:
      type: string
      description: 以字符串表示的 64-bit ID
      pattern: '^\d{1,20}$'
    ApiResponse:
      type: object
      properties:
        code: { type: string, example: OK }
        message: { type: string, example: success }
        data: {}
      required: [code, message]
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          example: INVALID_CREDENTIALS
        message:
          type: string
          example: 用户名或密码错误
        traceId:
          type: string
      required: [code, message]
    Page:
      type: object
      properties:
        pageNo: { type: integer, example: 1 }
        pageSize: { type: integer, example: 20 }
        total: { type: integer, example: 135 }
        hasNext: { type: boolean, example: true }
        items:
          type: array
          items: {}
      required: [pageNo, pageSize, total, hasNext, items]
    User:
      type: object
      properties:
        id: { $ref: '#/components/schemas/SnowflakeId' }
        tenantId: { $ref: '#/components/schemas/SnowflakeId' }
        nickname: { type: string, example: "小明" }
        avatarUrl: { type: string, nullable: true }
        gender: { type: integer, enum: [0,1,2,9], description: 0未知,1男,2女,9其他 }
        timezone: { type: string, nullable: true, example: "Asia/Shanghai" }
        locale: { type: string, example: "zh_CN" }
        status: { type: integer, enum: [0,1,2], description: 0禁用,1正常,2锁定, example: 1 }
        tokenVersion: { type: integer, example: 3 }
        lastLoginAt: { type: string, format: date-time, nullable: true }
        remark: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    UserCreateReq:
      type: object
      properties:
        nickname: { type: string }
        locale: { type: string, default: zh_CN }
        gender: { type: integer, enum: [0,1,2,9], default: 0 }
        avatarUrl: { type: string, nullable: true }
        accounts:
          description: 初始账号身份（至少一个）
          type: array
          items:
            $ref: '#/components/schemas/AccountCreateReq'
      required: [nickname, accounts]
    UserUpdateReq:
      type: object
      properties:
        nickname: { type: string }
        gender: { type: integer, enum: [0,1,2,9] }
        avatarUrl: { type: string, nullable: true }
        locale: { type: string }
        timezone: { type: string }
        status: { type: integer, enum: [0,1,2] }
        remark: { type: string }
    Account:
      type: object
      properties:
        id: { $ref: '#/components/schemas/SnowflakeId' }
        userId: { $ref: '#/components/schemas/SnowflakeId' }
        identityType:
          type: string
          example: username
          description: username/email/phone/oauth:github 等
        identifier:
          type: string
          example: "xiaoming"
        isPrimary: { type: boolean }
        isVerified: { type: boolean }
        verifiedAt: { type: string, format: date-time, nullable: true }
        failedAttempts: { type: integer, example: 0 }
        lockUntil: { type: string, format: date-time, nullable: true }
        lastLoginAt: { type: string, format: date-time, nullable: true }
        status: { type: integer, enum: [0,1,2], example: 1 }
        meta: { type: object, additionalProperties: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    AccountCreateReq:
      type: object
      properties:
        identityType: { type: string, example: username }
        identifier: { type: string, example: xiaoming }
        credential: { type: string, format: password, description: 本地密码时必填 }
        isPrimary: { type: boolean, default: true }
      required: [identityType, identifier]
    Role:
      type: object
      properties:
        id: { $ref: '#/components/schemas/SnowflakeId' }
        code: { type: string, example: ADMIN }
        name: { type: string, example: 系统管理员 }
        level: { type: integer, example: 10 }
        builtIn: { type: boolean, example: true }
        status: { type: integer, enum: [0,1], example: 1 }
        remark: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    RoleCreateReq:
      type: object
      properties:
        code: { type: string }
        name: { type: string }
        level: { type: integer, default: 100 }
        status: { type: integer, enum: [0,1], default: 1 }
        remark: { type: string }
      required: [code, name]
    RoleUpdateReq:
      type: object
      properties:
        name: { type: string }
        level: { type: integer }
        status: { type: integer, enum: [0,1] }
        remark: { type: string }
    Permission:
      type: object
      properties:
        id: { $ref: '#/components/schemas/SnowflakeId' }
        type: { type: string, enum: [api, menu, button, data], example: api }
        code: { type: string, example: user:read }
        name: { type: string, example: 用户查询 }
        resource: { type: string, nullable: true, example: /api/users/** }
        httpMethod: { type: string, nullable: true, example: GET }
        action: { type: string, nullable: true, example: video:upload }
        parentId: { $ref: '#/components/schemas/SnowflakeId' }
        orderNo: { type: integer, example: 0 }
        status: { type: integer, enum: [0,1], example: 1 }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    PermissionCreateReq:
      type: object
      properties:
        type: { type: string, enum: [api, menu, button, data], default: api }
        code: { type: string }
        name: { type: string }
        resource: { type: string, nullable: true }
        httpMethod: { type: string, nullable: true }
        action: { type: string, nullable: true }
        parentId: { $ref: '#/components/schemas/SnowflakeId' }
        orderNo: { type: integer, default: 0 }
        status: { type: integer, enum: [0,1], default: 1 }
      required: [type, code, name]
    PermissionUpdateReq:
      type: object
      properties:
        name: { type: string }
        resource: { type: string, nullable: true }
        httpMethod: { type: string, nullable: true }
        action: { type: string, nullable: true }
        parentId: { $ref: '#/components/schemas/SnowflakeId' }
        orderNo: { type: integer }
        status: { type: integer, enum: [0,1] }
    LoginReq:
      type: object
      properties:
        identityType: { type: string, example: username }
        identifier: { type: string, example: xiaoming }
        credential: { type: string, format: password, example: "P@ssw0rd!" }
        clientId: { type: string, example: web }
      required: [identityType, identifier, credential]
    LoginResp:
      type: object
      properties:
        tokenType: { type: string, example: Bearer }
        accessToken: { type: string }
        expiresIn: { type: integer, example: 900, description: 过期秒数 }
        refreshToken: { type: string }
        jti: { type: string }
        user:
          $ref: '#/components/schemas/User'
      required: [tokenType, accessToken, expiresIn]
    RefreshReq:
      type: object
      properties:
        refreshToken: { type: string }
        clientId: { type: string, example: web }
      required: [refreshToken]
    RefreshResp:
      allOf:
        - $ref: '#/components/schemas/LoginResp'
    LogoutReq:
      type: object
      properties:
        allSessions: { type: boolean, default: false, description: 是否注销该用户所有会话 }
    MFASetupPrepareResp:
      type: object
      properties:
        type: { type: string, example: TOTP }
        secret: { type: string, description: 仅展示一次 }
        otpauthUrl: { type: string, description: 仅展示一次（用于生成二维码） }
    MFAEnableReq:
      type: object
      properties:
        type: { type: string, enum: [TOTP, SMS, EMAIL], example: TOTP }
        code: { type: string, example: "123456" }
      required: [type, code]
    MFADisableReq:
      type: object
      properties:
        type: { type: string, enum: [TOTP, SMS, EMAIL] }
        code: { type: string, nullable: true }
      required: [type]
    MFAVerifyReq:
      type: object
      properties:
        mfaToken: { type: string, description: 登录阶段返回的临时token }
        code: { type: string }
      required: [mfaToken, code]
    BackupCodesResp:
      type: object
      properties:
        codes:
          type: array
          description: 仅生成时明文返回；服务端保存哈希
          items: { type: string, example: "ABCD-EFGH" }
    ForgotPasswordReq:
      type: object
      properties:
        identityType: { type: string, example: email }
        identifier: { type: string, example: user@example.com }
      required: [identityType, identifier]
    ResetPasswordReq:
      type: object
      properties:
        token: { type: string }
        newPassword: { type: string, format: password }
      required: [token, newPassword]
    AssignRolesReq:
      type: object
      properties:
        roleIds:
          type: array
          items: { $ref: '#/components/schemas/SnowflakeId' }
      required: [roleIds]
    AssignPermsReq:
      type: object
      properties:
        permIds:
          type: array
          items: { $ref: '#/components/schemas/SnowflakeId' }
      required: [permIds]
paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: 注册（创建用户+主账号）
      description: 仅本地账号；三方OAuth绑定走 /users/{id}/accounts
      security: []  # 开放
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserCreateReq' }
      responses:
        '201':
          description: 已创建
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                ok:
                  value:
                    code: OK
                    message: success
                    data:
                      user:
                        id: "10001"
                        tenantId: "0"
                        nickname: "小明"
                      accounts:
                        - identityType: username
                          identifier: xiaoming
        '400':
          description: 参数错误
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
  /auth/login:
    post:
      tags: [Auth]
      summary: 用户登录（用户名/邮箱/手机/OAuth本地绑定后使用）
      security: []  # 开放
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginReq' }
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LoginResp' }
        '401':
          description: 需要MFA或凭证错误
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
              examples:
                mfa_required:
                  value: { code: MFA_REQUIRED, message: 需要二次验证, mfaToken: "temp-xxxx" }
                invalid:
                  value: { code: INVALID_CREDENTIALS, message: 用户名或密码错误 }
  /auth/mfa/verify:
    post:
      tags: [MFA, Auth]
      summary: 登录阶段的 MFA 验证
      security: []  # 开放（持 mfaToken）
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MFAVerifyReq' }
      responses:
        '200':
          description: 登录完成，返回令牌
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LoginResp' }
        '400':
          description: 验证失败
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
  /auth/refresh:
    post:
      tags: [Auth]
      summary: 刷新令牌（旋转 Refresh Token）
      security: []  # 开放（持 refreshToken）
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RefreshReq' }
      responses:
        '200':
          description: 新的访问令牌与刷新令牌
          content:
            application/json:
              schema: { $ref: '#/components/schemas/RefreshResp' }
        '401':
          description: 刷新令牌无效或已吊销
          content:
            application/json: { schema: { $ref: '#/components/schemas/ErrorResponse' } }
  /auth/logout:
    post:
      tags: [Auth]
      summary: 注销（将当前 access 的 JTI 加入黑名单；可选全部会话）
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
      requestBody:
        required: false
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LogoutReq' }
      responses:
        '204': { description: 已注销 }
  /auth/me:
    get:
      tags: [Auth]
      summary: 当前用户信息与权限
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  user: { $ref: '#/components/schemas/User' }
                  roles:
                    type: array
                    items: { $ref: '#/components/schemas/Role' }
                  permissions:
                    type: array
                    items: { type: string, example: user:read }
  /auth/password/forgot:
    post:
      tags: [Auth]
      summary: 申请重置密码（邮件或短信发送）
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ForgotPasswordReq' }
      responses:
        '202': { description: 已受理 }
  /auth/password/reset:
    post:
      tags: [Auth]
      summary: 使用令牌重置密码
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ResetPasswordReq' }
      responses:
        '204': { description: 已重置 }
  /mfa/prepare:
    post:
      tags: [MFA]
      summary: 预创建 TOTP 秘钥（仅展示一次）
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema: { $ref: '#/components/schemas/MFASetupPrepareResp' }
  /mfa/enable:
    post:
      tags: [MFA]
      summary: 启用 MFA（TOTP/SMS/EMAIL）
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MFAEnableReq' }
      responses:
        '204': { description: 已启用 }
  /mfa/disable:
    post:
      tags: [MFA]
      summary: 关闭 MFA
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MFADisableReq' }
      responses:
        '204': { description: 已关闭 }
  /mfa/backup-codes:
    post:
      tags: [MFA]
      summary: 生成备用验证码（仅生成时返回明文）
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema: { $ref: '#/components/schemas/BackupCodesResp' }
  /users:
    get:
      tags: [Users]
      summary: 分页查询用户
      parameters:
        - $ref: '#/components/parameters/TenantHeader'
        - $ref: '#/components/parameters/PageNo'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/Sort'
        - name: keyword
          in: query
          schema: { type: string }
          description: 昵称/账号关键字
        - name: status
          in: query
          schema: { type: integer, enum: [0,1,2] }
        - name: roleCode
          in: query
          schema: { type: string }
        - name: createdFrom
          in: query
          schema: { type: string, format: date-time }
        - name: createdTo
          in: query
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'
              examples:
                demo:
                  value:
                    pageNo: 1
                    pageSize: 20
                    total: 120
                    hasNext: true
                    items:
                      - id: "10001"
                        nickname: "小明"
                        status: 1
    post:
      tags: [Users]
      summary: 创建用户（管理端）
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserCreateReq' }
      responses:
        '201':
          description: 已创建
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
  /users/{id}:
    get:
      tags: [Users]
      summary: 获取用户详情
      parameters:
        - name: id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/SnowflakeId' }
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
    patch:
      tags: [Users]
      summary: 更新用户
      parameters:
        - name: id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/SnowflakeId' }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UserUpdateReq' }
      responses:
        '204': { description: 已更新 }
    delete:
      tags: [Users]
      summary: 删除用户
      parameters:
        - name: id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/SnowflakeId' }
      responses:
        '204': { description: 已删除 }
  /users/{id}/roles:
    get:
      tags: [Users]
      summary: 获取用户角色
      parameters:
        - name: id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/SnowflakeId' }
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Role' }
    put:
      tags: [Users]
      summary: 替换用户的角色集合
      parameters:
        - name: id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/SnowflakeId' }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AssignRolesReq' }
      responses:
        '204': { description: 已更新 }
  /users/{id}/accounts:
    get:
      tags: [Accounts]
      summary: 查看用户的账号身份
      parameters:
        - name: id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/SnowflakeId' }
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Account' }
    post:
      tags: [Accounts]
      summary: 为用户绑定新账号（用户名/邮箱/手机/OAuth占位）
      parameters:
        - name: id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/SnowflakeId' }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AccountCreateReq' }
      responses:
        '201':
          description: 已绑定
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Account' }
  /users/{id}/accounts/{accountId}:
    delete:
      tags: [Accounts]
      summary: 解绑账号
      parameters:
        - name: id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/SnowflakeId' }
        - name: accountId
          in: path
          required: true
          schema: { $ref: '#/components/schemas/SnowflakeId' }
      responses:
        '204': { description: 已解绑 }
  /roles:
    get:
      tags: [Roles]
      summary: 分页查询角色
      parameters:
        - $ref: '#/components/parameters/PageNo'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/Sort'
        - name: keyword
          in: query
          schema: { type: string }
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Page' }
    post:
      tags: [Roles]
      summary: 新建角色
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RoleCreateReq' }
      responses:
        '201':
          description: 已创建
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Role' }
  /roles/{id}:
    get:
      tags: [Roles]
      summary: 角色详情
      parameters:
        - name: id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/SnowflakeId' }
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Role' }
    patch:
      tags: [Roles]
      summary: 更新角色
      parameters:
        - name: id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/SnowflakeId' }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RoleUpdateReq' }
      responses:
        '204': { description: 已更新 }
    delete:
      tags: [Roles]
      summary: 删除角色
      parameters:
        - name: id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/SnowflakeId' }
      responses:
        '204': { description: 已删除 }
  /roles/{id}/permissions:
    get:
      tags: [Roles, Permissions]
      summary: 查询角色绑定的权限
      parameters:
        - name: id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/SnowflakeId' }
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Permission' }
    put:
      tags: [Roles, Permissions]
      summary: 替换角色的权限集合
      parameters:
        - name: id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/SnowflakeId' }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AssignPermsReq' }
      responses:
        '204': { description: 已更新 }
  /permissions:
    get:
      tags: [Permissions]
      summary: 分页查询权限资源
      parameters:
        - $ref: '#/components/parameters/PageNo'
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/Sort'
        - name: type
          in: query
          schema: { type: string, enum: [api, menu, button, data] }
        - name: keyword
          in: query
          schema: { type: string }
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Page' }
    post:
      tags: [Permissions]
      summary: 创建权限资源
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PermissionCreateReq' }
      responses:
        '201':
          description: 已创建
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Permission' }
  /permissions/{id}:
    get:
      tags: [Permissions]
      summary: 权限详情
      parameters:
        - name: id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/SnowflakeId' }
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Permission' }
    patch:
      tags: [Permissions]
      summary: 更新权限
      parameters:
        - name: id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/SnowflakeId' }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PermissionUpdateReq' }
      responses:
        '204': { description: 已更新 }
    delete:
      tags: [Permissions]
      summary: 删除权限
      parameters:
        - name: id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/SnowflakeId' }
      responses:
        '204': { description: 已删除 }
  /tokens/refresh:
    get:
      tags: [Tokens]
      summary: 管理端：查询某用户的 Refresh Token 列表
      parameters:
        - name: userId
          in: query
          required: true
          schema: { $ref: '#/components/schemas/SnowflakeId' }
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Page' }
  /tokens/refresh/{id}:
    delete:
      tags: [Tokens]
      summary: 管理端：吊销指定 Refresh Token
      parameters:
        - name: id
          in: path
          required: true
          schema: { $ref: '#/components/schemas/SnowflakeId' }
      responses:
        '204': { description: 已吊销 }
  /tokens/denylist:
    post:
      tags: [Tokens]
      summary: 管理端：将某 Access JTI 加入黑名单（封禁）
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                jti: { type: string }
                reason: { type: string }
                expiresAt: { type: string, format: date-time }
              required: [jti, expiresAt]
      responses:
        '204': { description: 已加入 }
  /auth/login-logs:
    get:
      tags: [Tokens]
      summary: 登录日志查询
      parameters:
        - $ref: '#/components/parameters/PageNo'
        - $ref: '#/components/parameters/PageSize'
        - name: userId
          in: query
          schema: { $ref: '#/components/schemas/SnowflakeId' }
        - name: success
          in: query
          schema: { type: boolean }
        - name: from
          in: query
          schema: { type: string, format: date-time }
        - name: to
          in: query
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Page' }
security:
  - BearerAuth: []
